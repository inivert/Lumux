datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                   String        @id @default(cuid())
  name                 String?
  email                String?       @unique
  image                String?
  password             String?       @db.Text
  hasPassword          Boolean       @default(false)
  passwordResetToken   String?       @unique
  passwordResetTokenExp DateTime?
  role                 UserRole      @default(USER)
  createdAt            DateTime      @default(now())
  accounts             Account[]
  invitation           Invitation[]
  subscription         Subscription?
}

model Invitation {
  id        String    @id @default(cuid())
  email     String    @unique
  role      UserRole  @default(USER)
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime
  accepted  Boolean   @default(false)
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Subscription {
  id                    String    @id @default(cuid())
  userId                String    @unique
  stripeSubscriptionId  String?   @unique @map(name: "stripe_subscription_id")
  stripeCustomerId      String?   @unique @map(name: "stripe_customer_id")
  stripePriceId         String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
