datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String
  name      String   @unique
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id        String   @id @default(cuid())
  email     String   @unique
  role      String?  @default("USER")
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  accepted  Boolean  @default(false)
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String       @id @default(cuid())
  name                  String?
  email                 String?      @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  hasPassword           Boolean      @default(false)
  passwordResetToken    String?      @unique
  passwordResetTokenExp DateTime?
  role                  String?      @default("USER")
  customerId            String?      @unique @map(name: "customer_id")
  subscriptionId        String?      @unique @map(name: "subscription_id")
  priceId               String?      @map(name: "price_id")
  currentPeriodEnd      DateTime?    @map(name: "current_period_end")
  createdAt             DateTime     @default(now())
  accounts              Account[]
  sessions              Session[]
  apiKeys               ApiKey[]
  invitation            Invitation[]
  subscription          Subscription?
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
